// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: node.proto

package guaproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GuaNodeClient is the client API for GuaNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GuaNodeClient interface {
	RemoteCommand(ctx context.Context, in *RemoteCommandRequest, opts ...grpc.CallOption) (*RemoteCommandResponse, error)
	RegisterCommand(ctx context.Context, in *RegisterCommandRequest, opts ...grpc.CallOption) (*RegisterCommandReponse, error)
}

type guaNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewGuaNodeClient(cc grpc.ClientConnInterface) GuaNodeClient {
	return &guaNodeClient{cc}
}

func (c *guaNodeClient) RemoteCommand(ctx context.Context, in *RemoteCommandRequest, opts ...grpc.CallOption) (*RemoteCommandResponse, error) {
	out := new(RemoteCommandResponse)
	err := c.cc.Invoke(ctx, "/guaproto.GuaNode/RemoteCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guaNodeClient) RegisterCommand(ctx context.Context, in *RegisterCommandRequest, opts ...grpc.CallOption) (*RegisterCommandReponse, error) {
	out := new(RegisterCommandReponse)
	err := c.cc.Invoke(ctx, "/guaproto.GuaNode/RegisterCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuaNodeServer is the server API for GuaNode service.
// All implementations should embed UnimplementedGuaNodeServer
// for forward compatibility
type GuaNodeServer interface {
	RemoteCommand(context.Context, *RemoteCommandRequest) (*RemoteCommandResponse, error)
	RegisterCommand(context.Context, *RegisterCommandRequest) (*RegisterCommandReponse, error)
}

// UnimplementedGuaNodeServer should be embedded to have forward compatible implementations.
type UnimplementedGuaNodeServer struct {
}

func (UnimplementedGuaNodeServer) RemoteCommand(context.Context, *RemoteCommandRequest) (*RemoteCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteCommand not implemented")
}
func (UnimplementedGuaNodeServer) RegisterCommand(context.Context, *RegisterCommandRequest) (*RegisterCommandReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCommand not implemented")
}

// UnsafeGuaNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GuaNodeServer will
// result in compilation errors.
type UnsafeGuaNodeServer interface {
	mustEmbedUnimplementedGuaNodeServer()
}

func RegisterGuaNodeServer(s grpc.ServiceRegistrar, srv GuaNodeServer) {
	s.RegisterService(&GuaNode_ServiceDesc, srv)
}

func _GuaNode_RemoteCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuaNodeServer).RemoteCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guaproto.GuaNode/RemoteCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuaNodeServer).RemoteCommand(ctx, req.(*RemoteCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuaNode_RegisterCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuaNodeServer).RegisterCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guaproto.GuaNode/RegisterCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuaNodeServer).RegisterCommand(ctx, req.(*RegisterCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GuaNode_ServiceDesc is the grpc.ServiceDesc for GuaNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GuaNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "guaproto.GuaNode",
	HandlerType: (*GuaNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RemoteCommand",
			Handler:    _GuaNode_RemoteCommand_Handler,
		},
		{
			MethodName: "RegisterCommand",
			Handler:    _GuaNode_RegisterCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}
