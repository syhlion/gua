// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: gua.proto

package guaproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GuaClient is the client API for Gua service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GuaClient interface {
	NodeRegister(ctx context.Context, in *NodeRegisterRequest, opts ...grpc.CallOption) (*NodeRegisterResponse, error)
	JobReply(ctx context.Context, in *JobReplyRequest, opts ...grpc.CallOption) (*JobReplyResponse, error)
	Heartbeat(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
}

type guaClient struct {
	cc grpc.ClientConnInterface
}

func NewGuaClient(cc grpc.ClientConnInterface) GuaClient {
	return &guaClient{cc}
}

func (c *guaClient) NodeRegister(ctx context.Context, in *NodeRegisterRequest, opts ...grpc.CallOption) (*NodeRegisterResponse, error) {
	out := new(NodeRegisterResponse)
	err := c.cc.Invoke(ctx, "/guaproto.Gua/NodeRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guaClient) JobReply(ctx context.Context, in *JobReplyRequest, opts ...grpc.CallOption) (*JobReplyResponse, error) {
	out := new(JobReplyResponse)
	err := c.cc.Invoke(ctx, "/guaproto.Gua/JobReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guaClient) Heartbeat(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/guaproto.Gua/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuaServer is the server API for Gua service.
// All implementations should embed UnimplementedGuaServer
// for forward compatibility
type GuaServer interface {
	NodeRegister(context.Context, *NodeRegisterRequest) (*NodeRegisterResponse, error)
	JobReply(context.Context, *JobReplyRequest) (*JobReplyResponse, error)
	Heartbeat(context.Context, *Ping) (*Pong, error)
}

// UnimplementedGuaServer should be embedded to have forward compatible implementations.
type UnimplementedGuaServer struct {
}

func (UnimplementedGuaServer) NodeRegister(context.Context, *NodeRegisterRequest) (*NodeRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeRegister not implemented")
}
func (UnimplementedGuaServer) JobReply(context.Context, *JobReplyRequest) (*JobReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobReply not implemented")
}
func (UnimplementedGuaServer) Heartbeat(context.Context, *Ping) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}

// UnsafeGuaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GuaServer will
// result in compilation errors.
type UnsafeGuaServer interface {
	mustEmbedUnimplementedGuaServer()
}

func RegisterGuaServer(s grpc.ServiceRegistrar, srv GuaServer) {
	s.RegisterService(&Gua_ServiceDesc, srv)
}

func _Gua_NodeRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuaServer).NodeRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guaproto.Gua/NodeRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuaServer).NodeRegister(ctx, req.(*NodeRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gua_JobReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuaServer).JobReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guaproto.Gua/JobReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuaServer).JobReply(ctx, req.(*JobReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gua_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuaServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guaproto.Gua/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuaServer).Heartbeat(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

// Gua_ServiceDesc is the grpc.ServiceDesc for Gua service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gua_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "guaproto.Gua",
	HandlerType: (*GuaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NodeRegister",
			Handler:    _Gua_NodeRegister_Handler,
		},
		{
			MethodName: "JobReply",
			Handler:    _Gua_JobReply_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Gua_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gua.proto",
}
